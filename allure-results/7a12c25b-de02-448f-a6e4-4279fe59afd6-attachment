# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Login Tests >> Login successfully with valid credentials
- Location: C:\Users\dprakash\playwright\tests\loginToApplication.spec.js:21:5

# Error details

```
Error: page.goto: Protocol error (Page.navigate): Cannot navigate to invalid URL
Call log:
  - navigating to ""https://freelance-learn-automation.vercel.app/login"", waiting until "load"

    at BaseTest.beforeEach (C:\Users\dprakash\playwright\Utils\BaseTest.js:24:16)
    at C:\Users\dprakash\playwright\tests\loginToApplication.spec.js:18:24
```

# Test source

```ts
   1 |
   2 | const { test } = require('@playwright/test');
   3 | const fs = require('fs');
   4 | const path = require('path')
   5 |
   6 |
   7 | class BaseTest {
   8 |   
   9 |   // Before each test - navigate to app URL
  10 |   async beforeEach({ page }) {
  11 |     console.log('Running setup before each test');
  12 |
  13 |     // Load the properties from the file
  14 |     const properties = this.loadProperties("config.properties")
  15 |
  16 |     const appUrl = properties['APP_URL'];
  17 |     
  18 |     console.log("appUrl : " +appUrl)
  19 |
  20 |     if (!appUrl) {
  21 |         throw new Error('APP_URL not found in the properties file');
  22 |     }
  23 |
> 24 |     await page.goto(appUrl);
     |                ^ Error: page.goto: Protocol error (Page.navigate): Cannot navigate to invalid URL
  25 | }
  26 |
  27 | // After each test - close the browser
  28 | async afterEach({ browser }) {
  29 |     console.log('Closing the browser after each test');
  30 |     await browser.close();  // Close the browser instance after the test
  31 | }
  32 |
  33 | // Function to load properties from a .properties file
  34 | loadProperties(filePath) {
  35 |     const properties = {};
  36 |
  37 |   
  38 |     // Use path.resolve() to create the absolute file path
  39 |     const resolvedFilePath = path.resolve(__dirname, '..', filePath);
  40 |
  41 |     // Read the content of the properties file
  42 |     const fileContent = fs.readFileSync(resolvedFilePath, 'utf8');
  43 |
  44 |     
  45 |     // Split the file into lines
  46 |     const lines = fileContent.split('\n');
  47 |
  48 |     lines.forEach(line => {
  49 |         // Ignore empty lines and comments
  50 |         if (line.trim() === '' || line.startsWith('#')) return;
  51 |
  52 |         // Split each line into key and value
  53 |         const [key, value] = line.split('=');
  54 |
  55 |         // If key and value exist, trim and add to properties object
  56 |         if (key && value) {
  57 |             properties[key.trim()] = value.trim();
  58 |         }
  59 |     });
  60 |
  61 |     return properties;
  62 | }
  63 | }
  64 |
  65 | module.exports = BaseTest;
  66 |
```